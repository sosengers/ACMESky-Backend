# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from acmesky.models.base_model_ import Model
from acmesky import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, street=None, number=None, city=None, zip_code=None, country=None):  # noqa: E501
        """Address - a model defined in OpenAPI

        :param street: The street of this Address.  # noqa: E501
        :type street: str
        :param number: The number of this Address.  # noqa: E501
        :type number: str
        :param city: The city of this Address.  # noqa: E501
        :type city: str
        :param zip_code: The zip_code of this Address.  # noqa: E501
        :type zip_code: str
        :param country: The country of this Address.  # noqa: E501
        :type country: str
        """
        self.openapi_types = {
            'street': str,
            'number': str,
            'city': str,
            'zip_code': str,
            'country': str
        }

        self.attribute_map = {
            'street': 'street',
            'number': 'number',
            'city': 'city',
            'zip_code': 'zip_code',
            'country': 'country'
        }

        self._street = street
        self._number = number
        self._city = city
        self._zip_code = zip_code
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def street(self):
        """Gets the street of this Address.


        :return: The street of this Address.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.


        :param street: The street of this Address.
        :type street: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def number(self):
        """Gets the number of this Address.


        :return: The number of this Address.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Address.


        :param number: The number of this Address.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def city(self):
        """Gets the city of this Address.


        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def zip_code(self):
        """Gets the zip_code of this Address.


        :return: The zip_code of this Address.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Address.


        :param zip_code: The zip_code of this Address.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")  # noqa: E501

        self._zip_code = zip_code

    @property
    def country(self):
        """Gets the country of this Address.


        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country
