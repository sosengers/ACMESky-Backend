# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from acmesky.models.base_model_ import Model
import re
from acmesky import util

import re  # noqa: E501

class Interest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, departure_airport_code=None, arrival_airport_code=None, min_departure_date=None, max_comeback_date=None, max_price=None, prontogram_username=None):  # noqa: E501
        """Interest - a model defined in OpenAPI

        :param departure_airport_code: The departure_airport_code of this Interest.  # noqa: E501
        :type departure_airport_code: str
        :param arrival_airport_code: The arrival_airport_code of this Interest.  # noqa: E501
        :type arrival_airport_code: str
        :param min_departure_date: The min_departure_date of this Interest.  # noqa: E501
        :type min_departure_date: date
        :param max_comeback_date: The max_comeback_date of this Interest.  # noqa: E501
        :type max_comeback_date: date
        :param max_price: The max_price of this Interest.  # noqa: E501
        :type max_price: float
        :param prontogram_username: The prontogram_username of this Interest.  # noqa: E501
        :type prontogram_username: str
        """
        self.openapi_types = {
            'departure_airport_code': str,
            'arrival_airport_code': str,
            'min_departure_date': date,
            'max_comeback_date': date,
            'max_price': float,
            'prontogram_username': str
        }

        self.attribute_map = {
            'departure_airport_code': 'departure_airport_code',
            'arrival_airport_code': 'arrival_airport_code',
            'min_departure_date': 'min_departure_date',
            'max_comeback_date': 'max_comeback_date',
            'max_price': 'max_price',
            'prontogram_username': 'prontogram_username'
        }

        self._departure_airport_code = departure_airport_code
        self._arrival_airport_code = arrival_airport_code
        self._min_departure_date = min_departure_date
        self._max_comeback_date = max_comeback_date
        self._max_price = max_price
        self._prontogram_username = prontogram_username

    @classmethod
    def from_dict(cls, dikt) -> 'Interest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Interest of this Interest.  # noqa: E501
        :rtype: Interest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def departure_airport_code(self):
        """Gets the departure_airport_code of this Interest.


        :return: The departure_airport_code of this Interest.
        :rtype: str
        """
        return self._departure_airport_code

    @departure_airport_code.setter
    def departure_airport_code(self, departure_airport_code):
        """Sets the departure_airport_code of this Interest.


        :param departure_airport_code: The departure_airport_code of this Interest.
        :type departure_airport_code: str
        """
        if departure_airport_code is None:
            raise ValueError("Invalid value for `departure_airport_code`, must not be `None`")  # noqa: E501
        if departure_airport_code is not None and not re.search(r'[A-Z]{3,3}', departure_airport_code):  # noqa: E501
            raise ValueError("Invalid value for `departure_airport_code`, must be a follow pattern or equal to `/[A-Z]{3,3}/`")  # noqa: E501

        self._departure_airport_code = departure_airport_code

    @property
    def arrival_airport_code(self):
        """Gets the arrival_airport_code of this Interest.


        :return: The arrival_airport_code of this Interest.
        :rtype: str
        """
        return self._arrival_airport_code

    @arrival_airport_code.setter
    def arrival_airport_code(self, arrival_airport_code):
        """Sets the arrival_airport_code of this Interest.


        :param arrival_airport_code: The arrival_airport_code of this Interest.
        :type arrival_airport_code: str
        """
        if arrival_airport_code is None:
            raise ValueError("Invalid value for `arrival_airport_code`, must not be `None`")  # noqa: E501
        if arrival_airport_code is not None and not re.search(r'[A-Z]{3,3}', arrival_airport_code):  # noqa: E501
            raise ValueError("Invalid value for `arrival_airport_code`, must be a follow pattern or equal to `/[A-Z]{3,3}/`")  # noqa: E501

        self._arrival_airport_code = arrival_airport_code

    @property
    def min_departure_date(self):
        """Gets the min_departure_date of this Interest.


        :return: The min_departure_date of this Interest.
        :rtype: date
        """
        return self._min_departure_date

    @min_departure_date.setter
    def min_departure_date(self, min_departure_date):
        """Sets the min_departure_date of this Interest.


        :param min_departure_date: The min_departure_date of this Interest.
        :type min_departure_date: date
        """
        if min_departure_date is None:
            raise ValueError("Invalid value for `min_departure_date`, must not be `None`")  # noqa: E501

        self._min_departure_date = min_departure_date

    @property
    def max_comeback_date(self):
        """Gets the max_comeback_date of this Interest.


        :return: The max_comeback_date of this Interest.
        :rtype: date
        """
        return self._max_comeback_date

    @max_comeback_date.setter
    def max_comeback_date(self, max_comeback_date):
        """Sets the max_comeback_date of this Interest.


        :param max_comeback_date: The max_comeback_date of this Interest.
        :type max_comeback_date: date
        """
        if max_comeback_date is None:
            raise ValueError("Invalid value for `max_comeback_date`, must not be `None`")  # noqa: E501

        self._max_comeback_date = max_comeback_date

    @property
    def max_price(self):
        """Gets the max_price of this Interest.


        :return: The max_price of this Interest.
        :rtype: float
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """Sets the max_price of this Interest.


        :param max_price: The max_price of this Interest.
        :type max_price: float
        """
        if max_price is None:
            raise ValueError("Invalid value for `max_price`, must not be `None`")  # noqa: E501
        if max_price is not None and max_price < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_price = max_price

    @property
    def prontogram_username(self):
        """Gets the prontogram_username of this Interest.


        :return: The prontogram_username of this Interest.
        :rtype: str
        """
        return self._prontogram_username

    @prontogram_username.setter
    def prontogram_username(self, prontogram_username):
        """Sets the prontogram_username of this Interest.


        :param prontogram_username: The prontogram_username of this Interest.
        :type prontogram_username: str
        """
        if prontogram_username is None:
            raise ValueError("Invalid value for `prontogram_username`, must not be `None`")  # noqa: E501
        if prontogram_username is not None and len(prontogram_username) < 1:
            raise ValueError("Invalid value for `prontogram_username`, length must be greater than or equal to `1`")  # noqa: E501

        self._prontogram_username = prontogram_username
