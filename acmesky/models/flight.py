# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from acmesky.models.base_model_ import Model
import re
from acmesky import util

import re  # noqa: E501

class Flight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flight_id=None, departure_airport_code=None, arrival_airport_code=None, cost=None, departure_datetime=None, arrival_datetime=None):  # noqa: E501
        """Flight - a model defined in OpenAPI

        :param flight_id: The flight_id of this Flight.  # noqa: E501
        :type flight_id: str
        :param departure_airport_code: The departure_airport_code of this Flight.  # noqa: E501
        :type departure_airport_code: str
        :param arrival_airport_code: The arrival_airport_code of this Flight.  # noqa: E501
        :type arrival_airport_code: str
        :param cost: The cost of this Flight.  # noqa: E501
        :type cost: float
        :param departure_datetime: The departure_datetime of this Flight.  # noqa: E501
        :type departure_datetime: datetime
        :param arrival_datetime: The arrival_datetime of this Flight.  # noqa: E501
        :type arrival_datetime: datetime
        """
        self.openapi_types = {
            'flight_id': str,
            'departure_airport_code': str,
            'arrival_airport_code': str,
            'cost': float,
            'departure_datetime': datetime,
            'arrival_datetime': datetime
        }

        self.attribute_map = {
            'flight_id': 'flight_id',
            'departure_airport_code': 'departure_airport_code',
            'arrival_airport_code': 'arrival_airport_code',
            'cost': 'cost',
            'departure_datetime': 'departure_datetime',
            'arrival_datetime': 'arrival_datetime'
        }

        self._flight_id = flight_id
        self._departure_airport_code = departure_airport_code
        self._arrival_airport_code = arrival_airport_code
        self._cost = cost
        self._departure_datetime = departure_datetime
        self._arrival_datetime = arrival_datetime

    @classmethod
    def from_dict(cls, dikt) -> 'Flight':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Flight of this Flight.  # noqa: E501
        :rtype: Flight
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flight_id(self):
        """Gets the flight_id of this Flight.


        :return: The flight_id of this Flight.
        :rtype: str
        """
        return self._flight_id

    @flight_id.setter
    def flight_id(self, flight_id):
        """Sets the flight_id of this Flight.


        :param flight_id: The flight_id of this Flight.
        :type flight_id: str
        """
        if flight_id is None:
            raise ValueError("Invalid value for `flight_id`, must not be `None`")  # noqa: E501

        self._flight_id = flight_id

    @property
    def departure_airport_code(self):
        """Gets the departure_airport_code of this Flight.


        :return: The departure_airport_code of this Flight.
        :rtype: str
        """
        return self._departure_airport_code

    @departure_airport_code.setter
    def departure_airport_code(self, departure_airport_code):
        """Sets the departure_airport_code of this Flight.


        :param departure_airport_code: The departure_airport_code of this Flight.
        :type departure_airport_code: str
        """
        if departure_airport_code is None:
            raise ValueError("Invalid value for `departure_airport_code`, must not be `None`")  # noqa: E501
        if departure_airport_code is not None and not re.search(r'[A-Z]{3,3}', departure_airport_code):  # noqa: E501
            raise ValueError("Invalid value for `departure_airport_code`, must be a follow pattern or equal to `/[A-Z]{3,3}/`")  # noqa: E501

        self._departure_airport_code = departure_airport_code

    @property
    def arrival_airport_code(self):
        """Gets the arrival_airport_code of this Flight.


        :return: The arrival_airport_code of this Flight.
        :rtype: str
        """
        return self._arrival_airport_code

    @arrival_airport_code.setter
    def arrival_airport_code(self, arrival_airport_code):
        """Sets the arrival_airport_code of this Flight.


        :param arrival_airport_code: The arrival_airport_code of this Flight.
        :type arrival_airport_code: str
        """
        if arrival_airport_code is None:
            raise ValueError("Invalid value for `arrival_airport_code`, must not be `None`")  # noqa: E501
        if arrival_airport_code is not None and not re.search(r'[A-Z]{3,3}', arrival_airport_code):  # noqa: E501
            raise ValueError("Invalid value for `arrival_airport_code`, must be a follow pattern or equal to `/[A-Z]{3,3}/`")  # noqa: E501

        self._arrival_airport_code = arrival_airport_code

    @property
    def cost(self):
        """Gets the cost of this Flight.


        :return: The cost of this Flight.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this Flight.


        :param cost: The cost of this Flight.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501
        if cost is not None and cost < 0:  # noqa: E501
            raise ValueError("Invalid value for `cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cost = cost

    @property
    def departure_datetime(self):
        """Gets the departure_datetime of this Flight.


        :return: The departure_datetime of this Flight.
        :rtype: datetime
        """
        return self._departure_datetime

    @departure_datetime.setter
    def departure_datetime(self, departure_datetime):
        """Sets the departure_datetime of this Flight.


        :param departure_datetime: The departure_datetime of this Flight.
        :type departure_datetime: datetime
        """
        if departure_datetime is None:
            raise ValueError("Invalid value for `departure_datetime`, must not be `None`")  # noqa: E501

        self._departure_datetime = departure_datetime

    @property
    def arrival_datetime(self):
        """Gets the arrival_datetime of this Flight.


        :return: The arrival_datetime of this Flight.
        :rtype: datetime
        """
        return self._arrival_datetime

    @arrival_datetime.setter
    def arrival_datetime(self, arrival_datetime):
        """Sets the arrival_datetime of this Flight.


        :param arrival_datetime: The arrival_datetime of this Flight.
        :type arrival_datetime: datetime
        """
        if arrival_datetime is None:
            raise ValueError("Invalid value for `arrival_datetime`, must not be `None`")  # noqa: E501

        self._arrival_datetime = arrival_datetime
