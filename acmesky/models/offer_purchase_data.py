# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from acmesky.models.base_model_ import Model
from acmesky.models.address import Address
from acmesky import util

from acmesky.models.address import Address  # noqa: E501

class OfferPurchaseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_code=None, address=None, name=None, surname=None):  # noqa: E501
        """OfferPurchaseData - a model defined in OpenAPI

        :param offer_code: The offer_code of this OfferPurchaseData.  # noqa: E501
        :type offer_code: str
        :param address: The address of this OfferPurchaseData.  # noqa: E501
        :type address: Address
        :param name: The name of this OfferPurchaseData.  # noqa: E501
        :type name: str
        :param surname: The surname of this OfferPurchaseData.  # noqa: E501
        :type surname: str
        """
        self.openapi_types = {
            'offer_code': str,
            'address': Address,
            'name': str,
            'surname': str
        }

        self.attribute_map = {
            'offer_code': 'offer_code',
            'address': 'address',
            'name': 'name',
            'surname': 'surname'
        }

        self._offer_code = offer_code
        self._address = address
        self._name = name
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt) -> 'OfferPurchaseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OfferPurchaseData of this OfferPurchaseData.  # noqa: E501
        :rtype: OfferPurchaseData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_code(self):
        """Gets the offer_code of this OfferPurchaseData.


        :return: The offer_code of this OfferPurchaseData.
        :rtype: str
        """
        return self._offer_code

    @offer_code.setter
    def offer_code(self, offer_code):
        """Sets the offer_code of this OfferPurchaseData.


        :param offer_code: The offer_code of this OfferPurchaseData.
        :type offer_code: str
        """
        if offer_code is None:
            raise ValueError("Invalid value for `offer_code`, must not be `None`")  # noqa: E501
        if offer_code is not None and len(offer_code) < 1:
            raise ValueError("Invalid value for `offer_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._offer_code = offer_code

    @property
    def address(self):
        """Gets the address of this OfferPurchaseData.


        :return: The address of this OfferPurchaseData.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OfferPurchaseData.


        :param address: The address of this OfferPurchaseData.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def name(self):
        """Gets the name of this OfferPurchaseData.


        :return: The name of this OfferPurchaseData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OfferPurchaseData.


        :param name: The name of this OfferPurchaseData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def surname(self):
        """Gets the surname of this OfferPurchaseData.


        :return: The surname of this OfferPurchaseData.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this OfferPurchaseData.


        :param surname: The surname of this OfferPurchaseData.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")  # noqa: E501
        if surname is not None and len(surname) < 1:
            raise ValueError("Invalid value for `surname`, length must be greater than or equal to `1`")  # noqa: E501

        self._surname = surname
